/*
Crea en nodeJS una usando Sequelize los siguientes métodos:

- addChat: Crear un nuevo evento con datos similares a los de google gmail.
- updateChat: Poder modificar el chat a través de su id.
- sendChat: Enviar un nuevo mensaje.
- removeChat: Eliminar el chat a través de su id.
- fetchChats: Mostrar los 100 chats anteriores con un offset y devolver offset en la salida.
- fetchChat: Bucar un chat a través de su ID.
- fetchChatsInvited: Ver los chats en los que estás invitaod.

Normas:
Todos los chats deben usar el filtro “user_id” uuid para filtar por usuario.

Datos:
contacts = [
    {
      id: 1,
      fullName: 'Gavin Griffith',
      role: 'Frontend Developer',
      about: 'Cake pie jelly jelly beans. Marzipan lemon drops halvah cake. Pudding cookie lemon drops icing',
      avatar: avatar5,
      status: 'offline',
    }]

chats = [{
      id: 1,
      userId: 2,
      unseenMsgs: 0,
      messages: [
        {
          message: 'Hi',
          time: 'Mon Dec 10 2018 07:45:00 GMT+0000 (GMT)',
          senderId: 11,
          feedback: {
            isSent: true,
            isDelivered: true,
            isSeen: true,
          },
        }
      ],
    }]
    
    
    
Seguir la siguiente estructura para los metodos:
 const addChat = async (req, res) => {
     ..
 }

*/

const addChat = async (req, res) => {
    try {
        const { userId, unseenMsgs, messages } = req.body;
        const newChat = await Chat.create({
            userId,
            unseenMsgs,
            messages
        });
        res.status(201).json({
            data: newChat,
            message: 'Chat created successfully'
        });
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
};

const updateChat = async (req, res) => {
    try {
        const { id } = req.params;
        const { userId, unseenMsgs, messages } = req.body;
        const chats = await Chat.findAll({
            attributes: ['id', 'userId', 'unseenMsgs', 'messages'],
            where: { id: id }
        });
        if (chats.length > 0) {
            chats.forEach(async chat => {
                await chat.update({
                    userId: userId || chat.userId,
                    unseenMsgs: unseenMsgs || chat.unseenMsgs,
                    messages: messages || chat.messages
                });
            })
        }
        return res.status(200).json({
            data: chats,
            message: 'Chat updated successfully'
        });
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
};

const sendChat = async (req, res) => {
    try {
        const { id } = req.params;
        const { message, time, senderId, feedback } = req.body;
        const chats = await Chat.findAll({
            attributes: ['id', 'userId', 'unseenMsgs', 'messages'],
            where: { id: id }
        });
        if (chats.length > 0) {
            chats.forEach(async chat => {
                const newMessage = {
                    message,
                    time,
                    senderId,
                    feedback
                };
                await chat.update({
                    messages: [...chat.messages, newMessage]
                });
            })
        }
        return res.status(200).json({
            data: chats,
            message: 'Chat updated successfully'
        });
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
};

const removeChat = async (req, res) => {
    try {
        const { id } = req.params;
        const deleteRowCount = await Chat.destroy({
            where: { id: id }
        });
        res.status(200).json({
            data: deleteRowCount,
            message: 'Chat deleted successfully'
        });
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
};

const fetchChats = async (req, res) => {
    try {
        const { userId } = req.params;
        const { offset } = req.query;
        const chats = await Chat.findAll({
            attributes: ['id', 'userId', 'unseenMsgs', 'messages'],
            where: { userId: userId },
            limit: 100,
            offset: offset
        });
        res.status(200).json({
            data: chats,
            message: 'Chats retrieved successfully',
            offset: offset + 100
        });
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
};

const fetchChat = async (req, res) => {
    try {
        const { id } = req.params;
        const chat = await Chat.findOne({
            attributes: ['id', 'userId', 'unseenMsgs', 'messages'],
            where: { id: id }
        });
        res.status(200).json({
            data: chat,
            message: 'Chat retrieved successfully'
        });
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
};

const fetchChatsInvited = async (req, res) => {
    try {
        const { userId } = req.params;
        const chats = await Chat.findAll({
            attributes: ['id', 'userId', 'unseenMsgs', 'messages'],
            where: { userId: userId }
        });
        res.status(200).json({
            data: chats,
            message: 'Chats retrieved successfully'
        });
    } catch (error) {
        console.log(error);
        res.status(500).send(error.message);
    }
};

module.exports = {
    addChat,
    updateChat,
    sendChat,
    removeChat,
    fetchChats,
    fetchChat,
    fetchChatsInvited
}
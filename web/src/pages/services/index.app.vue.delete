<script setup lang="ts">
import axios from 'axios'

import { text, blocks, apisInfoArr, blockGroups } from '/@src/texts/blocks/index'

import { appGroups } from '/@src/texts/blocks/apps/index'
import { templateGroups, newTemplateGroups } from '/@src/texts/blocks/templates/index'

import { ref, watch, computed, onMounted, onBeforeMount } from 'vue'
import VueScrollTo from 'vue-scrollto'
import templatesBlock from './templatesBlock.vue'

import landing from '/@src/texts/tool/web/landing.json'
import templateCarousel from './templateCarousel.vue'

const scrollTo = VueScrollTo.scrollTo
const activeMenuItem = ref(0)



const instance = axios.create({
  baseURL: "https://api.aythen.com",
  withCredentials: false,
  headers: { 'Content-Type': 'application/json' }
});


//template
const dataTemplate = ref({})
const showTemplate = ref(-1)
const titleTemplate = ref('')

const activeMenuTemplateCategory = ref(-1)
const activeMenuTemplate = ref(-1)
const activeMenuTemplateData = ref(-1)

const filterTemplate = ref('')

const filteredTemplateData = computed(() => {
  if (filterTemplate.value === '') {
    return []
  } else {
    return blocks.filter((item) => {
      return (
        item.icon.match(new RegExp(filterTemplate.value, 'i')) ||
        item.name.match(new RegExp(filterTemplate.value, 'i')) ||
        item.type.match(new RegExp(filterTemplate.value, 'i'))
      )
    })
  }
})


dataTemplate.value = {
    title: "",
    subtitle: "",
    resume: "",
    app: [],
    data: []
}

watch(titleTemplate, (newVal, oldVal) => {
    //axios('/src/texts/blocks/apps/' + titleApp.value + '.json')
    instance('/src/texts/blocks/templates/BusTracking.json')
    .then(response => {
      dataTemplate.value = response.data
    })
})

titleTemplate.value = 'BusTracking'




const templates = ref([])
const templateid = ref('')
onMounted(async ()=>{
  let templateList = await instance.get('/templates').then( res => { return JSON.stringify(res.data) })
  templates.value = JSON.parse(templateList)
  //console.log("slided", templates.value )
    if(window !== undefined){
      templateid.value = window.location.search.split('/')[1]
   }
   console.log(apisInfoArr)
})




//app
const dataApp = ref({})
const showApp = ref(-1)
const titleApp = ref('')

const activeMenuAppCategory = ref(-1)
const activeMenuApp = ref(-1)
const activeMenuAppData = ref(-1)

const filterApp = ref('')

const filteredAppData = computed(() => {
  if (filterApp.value === '') {
    return []
  } else {
    return blocks.filter((item) => {
      return (
        item.icon.match(new RegExp(filterApp.value, 'i')) ||
        item.name.match(new RegExp(filterApp.value, 'i')) ||
        item.type.match(new RegExp(filterApp.value, 'i'))
      )
    })
  }
})


dataApp.value = {
    title: "",
    subtitle: "",
    resume: "",
    app: [],
    data: []
}

watch(titleApp, (newVal, oldVal) => {
    //axios('/src/texts/blocks/apps/' + titleApp.value + '.json')
    instance('/src/texts/blocks/apps/AnyWash.json')
    .then(response => {
      dataApp.value = response.data
    })
})

titleApp.value = 'BusTracking'

let showSlide = ref()

watch(templates, ()=>{
    showSlide.value = templates.value 
})




let uploadTemplate = ref(false)
let newShowSlide = ref([])

const updateTemplateBlock = (slide)=>{
    newShowSlide.value = slide
    uploadTemplate.value = true
}

const getCategory = (category) =>{
  
   const filteredcategories = showSlide.value?.filter(item=>item.category == category)
   return filteredcategories || []
}
const filteredTemplate = computed(()=>{
    let filtemplate = showSlide.value?.filter(item=> item.id == templateid.value)
    return filtemplate || []
})
const uploadTemplateBlock = computed(()=>{
  if(!uploadTemplate.value){
    return uploadTemplate.value 
  }
   return uploadTemplate.value
})

let newCarousel = ref([])
const handleTemplateList = (group, index)=>{
  // showPage.value = true
  
  if(!uploadTemplate.value){
    document.getElementById(group)?.scrollIntoView({ behavior: 'smooth' });
  }
  else {
      newCarousel.value = JSON.parse(JSON.stringify(getCategory(group))); 
         document.getElementById(group)?.scrollIntoView({ behavior: 'smooth' });

  }
}

const scrollToAny = (id)=>{
  document.getElementById(id)?.scrollIntoView({ behavior: 'smooth' });
}

const filteredComponentCategory = (cat)=>{
  let componentCategory = apisInfoArr.filter(item=> item.categoria == cat)
  return componentCategory
}
</script>

<template>
  <div>
    <Section
      overflown
      :style="{ marginTop: '70px' }"
      class="section is-overflown pt-0"
    >
      <Container>
        <div class="vulk-docs">
          <div class="left">
            <div class="left-menu">
              <!--Section Title-->
              <div class="is-relative pr-4 z-3">
                <div class="pb-4">
                  <div class="">
                    <div class="library-search">
                      <Field>
                        <Control  icon="feather:search">
                          <VInput
                            v-model="filterApp"
                            type="text"
                            :placeholder="text.placeholder"
                          />
                          <button
                            v-if="filterApp.length > 0"
                            class="close-search"
                            @click="filterApp = ''"
                          >
                            <i-feather-x />
                          </button>
                        </Control>
                        <div v-if="filterApp.length > 0" class="filter-results">
                          <div class="filter-results-inner">
                            <ul v-if="filteredAppData.length">
                              <li
                                v-for="result in filteredAppData"
                                :key="result.name"
                              >
                                <RouterLink :to="result.link">
                                  <div class="filter-result-item">
                                    <div class="result-icon">
                                      <i
                                        class="iconify"
                                        :data-icon="result.icon"
                                      ></i>
                                    </div>
                                    <div class="meta">
                                      <h3>{{ result.name }}</h3>
                                      <p class="paragraph rem-85">
                                        {{ result.type }}
                                      </p>
                                    </div>
                                    <div class="go-icon">
                                      <i-ph-arrow-circle-right-duotone />
                                    </div>
                                  </div>
                                </RouterLink>
                              </li>
                            </ul>
                            <div v-else-if="!filteredAppData.length">
                              <div class="search-placeholder">
                                <div>
                                  <i-iconoir-google-docs />
                                  <h3>Nothing Found</h3>
                                  <p class="paragraph rem-90">
                                    We couldn't find any matching results
                                  </p>
                                </div>
                              </div>
                            </div>
                          </div>
                        </div>
                      </Field>
                    </div>
                  </div>
                </div>
              </div>
                <!--h1 class="has-text-weight-bold	is-size-5">Titulo del texto</h1-->
              <!--<hr>-->
              <!--<div>-->
              <!--    <Card  shape="squared is-clickable" class="mr-3" >-->
              <!--      <a @click="showApiPage" >-->
              <!--      <table style="width:100%">-->
              <!--        <tr class="card-text-container is-vcentered is-flex is-flex-direction-column">-->
              <!--          <td style="vertical-align:middle !important;" ><Title tag="h2" weight="semi" :size="6"  leading>{{$t('examples')}}</Title></td>-->
              <!--          <p>{{$t('jobs_example_text')}} </p>-->
                        
              <!--        </tr>-->
              <!--      </table>-->
              <!--      </a>-->
                    
              <!--    </Card>-->
              <!--</div>-->
              <!--<hr />-->
               <!--Buttons class="mt-2">
                    <Button @click="handleClick" size="xs"  color="primary" raised bold>
                      Show Template
                    </Button>
               </Buttons-->
        
              <div v-if="true">
                <hr />
                <div class="mb-4">
                  <strong class="components-title">Components</strong>
                </div>
                <ul>
                  <li
                    v-for="(group, index) in apisInfoArr.slice(0,10)"
                    :key="index"
                    @click="activeMenuItem = index"
                    @keydown.space.prevent="activeMenuItem = index"
                  >
                    <a
                      :class="activeMenuItem === index ? 'is-active' : ''"
                      @click.prevent="()=>{
                        scrollToAny(`components-group-${index}`)
                        
             
                        }
                      "
                      @keydown.space.prevent="
                        () =>
                          scrollTo(`#components-group-${index}`, 800, {
                            offset: -100,
                          })
                      "
                    >
                      {{ group.categoria }}
                    </a>
                  </li>
                </ul>
              </div>
              <div v-if="true"> <!--cambiado a false mostrar poner true-->
                <hr />
                <div class="mb-4">
                  <strong class="templates-title">Templates</strong>
                </div>
                <ul>
                  <li
                    v-for="(group, index) in newTemplateGroups"
                    :key="'category-app' + index"
                    >
                      <a
                        :class="activeMenuAppCategory === index ? 'is-active' : ''"
                        @click="
                        () => {
                            if(activeMenuAppCategory == index){
                              activeMenuAppCategory = -1
                            }else{
                              activeMenuAppCategory = index
                              activeMenuApp = -1
                            }
                            handleTemplateList(group, index)
                        }"
                        @keydown.space.prevent="
                        () => {
                            if(activeMenuAppCategory == index){
                              activeMenuAppCategory = -1
                            }else{
                              activeMenuAppCategory = index
                              activeMenuApp = -1
                            }
                        }"
                      >
                        {{ group }}
                      </a>
                      <!--ul
                        v-if="activeMenuAppCategory === index"
                        :style="{paddingLeft: '12px'}"
                        >
                        <li
                          v-for="(app, key) in group.items"
                          :key="key"
                          >
                            <a 
                              :class="activeMenuApp === key ? 'is-active' : ''"
                              @click="
                              () => {
                                  titleApp = app.title
                                  showApp = -1
                                          
                                  if(activeMenuApp == key){
                                    activeMenuApp = -1
                                  }else{
                                    activeMenuApp = key
                                    activeMenuAppData = -1
                                  }
                                  
                                  scrollTo(`#apps-group`, 800, {
                                    offset: -100,
                                  })
                              }"
                              @keydown.space.prevent="
                              () => {
                                  titleApp = app.title
                                  showApp = -1
                                          
                                  if(activeMenuApp == key){
                                    activeMenuApp = -1
                                  }else{
                                    activeMenuApp = key
                                    activeMenuAppData = -1
                                  }
                                  
                                  scrollTo(`#apps-group`, 800, {
                                    offset: -100,
                                  })
                              }"
                              >
                                {{ app.title }}
                            </a>
                            <ul
                                v-if="activeMenuApp === key"
                                :style="{paddingLeft: '12px'}">
                                <li   
                                  v-for="(data, subkey) in app.app">
                                    <a
                                      :class="activeMenuAppData === subkey ? 'is-active' : ''"
                                      @click.prevent="
                                        () => {
                                          showApp = subkey
                                          
                                          if(activeMenuAppData == subkey){
                                            showApp = -1
                                            activeMenuAppData = -1
                                          }else{
                                            activeMenuAppData = subkey
                                          }
                                          
                                          scrollTo(`#apps-group`, 800, {
                                            offset: -100,
                                          })
                                        }"
                                      @keydown.space.prevent="
                                        () => {
                                          showApp = subkey
                                          
                                          if(activeMenuAppData == subkey){
                                            showApp = -1
                                            activeMenuAppData = -1
                                          }else{
                                            activeMenuAppData = subkey
                                          }
                                          
                                          scrollTo(`#apps-group`, 800, {
                                            offset: -100,
                                          })
                                        }">
                                        {{ data }}
                                    </a>
                                </li>
                            </ul>
                        </li>
                      </ul-->
                  </li>
                </ul>
                
              </div>
              <div v-if="false"><!--cambiado a false mostrar poner true-->
                <hr />
                <div class="mb-4">
                  <strong >Apps</strong>
                </div>
                <ul>
                  <li
                    v-for="(group, index) in appGroups"
                    :key="'category-app' + index"
                    >
                      <a
                        :class="activeMenuAppCategory === index ? 'is-active' : ''"
                        @click="
                        () => {
                            if(activeMenuAppCategory == index){
                              activeMenuAppCategory = -1
                            }else{
                              activeMenuAppCategory = index
                              activeMenuApp = -1
                            }
                        }"
                        @keydown.space.prevent="
                        () => {
                            if(activeMenuAppCategory == index){
                              activeMenuAppCategory = -1
                            }else{
                              activeMenuAppCategory = index
                              activeMenuApp = -1
                            }
                        }"
                      >
                        {{ group.name }}
                      </a>
                      <ul
                        v-if="activeMenuAppCategory === index"
                        :style="{paddingLeft: '12px'}"
                        >
                        <li
                          v-for="(app, key) in group.items"
                          :key="key"
                          >
                            <a 
                              :class="activeMenuApp === key ? 'is-active' : ''"
                              @click="
                              () => {
                                  titleApp = app.title
                                  showApp = -1
                                          
                                  if(activeMenuApp == key){
                                    activeMenuApp = -1
                                  }else{
                                    activeMenuApp = key
                                    activeMenuAppData = -1
                                  }
                                  
                                  scrollTo(`#apps-group`, 800, {
                                    offset: -100,
                                  })
                              }"
                              @keydown.space.prevent="
                              () => {
                                  titleApp = app.title
                                  showApp = -1
                                          
                                  if(activeMenuApp == key){
                                    activeMenuApp = -1
                                  }else{
                                    activeMenuApp = key
                                    activeMenuAppData = -1
                                  }
                                  
                                  scrollTo(`#apps-group`, 800, {
                                    offset: -100,
                                  })
                              }"
                              >
                                {{ app.title }}
                            </a>
                            <ul
                                v-if="activeMenuApp === key"
                                :style="{paddingLeft: '12px'}">
                                <li   
                                  v-for="(data, subkey) in app.app">
                                    <a
                                      :class="activeMenuAppData === subkey ? 'is-active' : ''"
                                      @click.prevent="
                                        () => {
                                          showApp = subkey
                                          
                                          if(activeMenuAppData == subkey){
                                            showApp = -1
                                            activeMenuAppData = -1
                                          }else{
                                            activeMenuAppData = subkey
                                          }
                                          
                                          scrollTo(`#apps-group`, 800, {
                                            offset: -100,
                                          })
                                        }"
                                      @keydown.space.prevent="
                                        () => {
                                          showApp = subkey
                                          
                                          if(activeMenuAppData == subkey){
                                            showApp = -1
                                            activeMenuAppData = -1
                                          }else{
                                            activeMenuAppData = subkey
                                          }
                                          
                                          scrollTo(`#apps-group`, 800, {
                                            offset: -100,
                                          })
                                        }">
                                        {{ data }}
                                    </a>
                                </li>
                            </ul>
                        </li>
                      </ul>
                  </li>
                </ul>
              </div>
            </div>
          </div>
          <div v-if="true" class="right pt-4">
            <!--pre>
              {{filteredTemplate}}
            </pre-->
            <!--Desde aqui empieza el template-->
              <templatesBlock v-if="filteredTemplate.length > 0 ? true : uploadTemplateBlock" :showText="uploadTemplate" :showSlide="newShowSlide.length > 0 ? newShowSlide : filteredTemplate"/>
              
            <div
              v-for="(group, index) in apisInfoArr.slice(0,10)"
              :id="`components-group-${index}`"
              :key="index"
              class="block-group"
            >
              <RouterLink :to="{name: 'services-flow'}">
                link router
              </RouterLink>
              <!--pre>
                {{group}}
              </pre-->
              <div class="block-group-header">
                <div class="group-icon">
                  <i class="iconify" data-icon="ph:rocket-duotone"></i>
                </div>
                <div class="meta">
                  <h3>{{ group.categoria }}</h3>
                  <p class="paragraph">{{ group.list[0].description }}</p>
                </div>
              </div>
              <div class="block-group-body">
                <div class="columns is-multiline b-columns-third-tablet-p pb-6">
                  <div
                    v-for="(block, i) in group.list"
                    :key="i"
                    class="column is-5"
                  >
                    <Card  class="block-group-card api-items">
                      <!--template #header>
                        <div class="block-head">
                          <DarkImage
                            :src="block.icon"
                            :src-dark="block.iconDark"
                            alt="block icon"
                          />
                        </div>
                      </template-->
                      <div class="block-link p-2">
                        <div>
                          <Title tag="h3" :size="7" weight="semi" narrow>
                            <span>{{ block.webs_con_ias }}</span>
                          </Title>
                          <p class="text-description paragraph rem-85 pb-3">{{ block.categoria }}</p>
                          <p class="text-description paragraph rem-85 pt-1">{{ block.description }}</p>
                        </div>
                        <div @click="showApiPage">
                          <i
                            class="iconify"
                            data-icon="feather:arrow-right"
                          ></i>
                        </div>
                      </div>
                    </Card>
                  </div>
                </div>
              </div>
            </div>
            
              <div  shape-color="footer-dark">
                <Container>
                  <!--templateCarousel :slides="showSlide">
                    <template #title>
                      <CollectionTitle :title="'All Templates'" subtitle="Templates" />
                    </template>
                  </templateCarousel-->
                <div v-if="!uploadTemplate"><!--v-if="!uploadTemplate"-->

                  
                  <template v-for="(cat, index) in newTemplateGroups">
                    <templateCarousel :id="cat" @handleTemplate="updateTemplateBlock"  :slides="getCategory(cat)">
                      <template #title>
                        <CollectionTitle 
                          class="mt-0"
                          :title="getCategory(cat) ? getCategory(cat)[0]?.category : 'all templates'" 
                          subtitle="Templates" />
                      </template>

                    </templateCarousel>
                    
                    <!--pre>
                      {{getCategory(cat)}}
                    </pre-->
                    
                  <div v-if="getCategory(cat)?.length == 0 || getCategory(cat) == [] || undefined" class="custom-loader"></div>
                  </template>
                </div>
                  
                  <div>
                    <templateCarousel :id="newCarousel[0]?.category" @handleTemplate="updateTemplateBlock" :slides="newCarousel">
                      <template #title>
                        <CollectionTitle :title="newCarousel ? newCarousel[0]?.category : 'all templates'" subtitle="Templates" />
                      </template>

                    </templateCarousel>
                  </div>
                  
                </Container>
              </div>
            
            <!--div>
                <BlocksTemplates
                  :data-template="dataTemplate"
                  :show-template="showTemplate" />
            </div>
            
            <div id="apps-group" >
                <BlocksApps
                  :data-app="dataApp"
                  :show-app="showApp" />
            </div-->
            <!--llega hasta aqui-->
          </div>
          
        </div>
      </Container>
    </Section>
  </div>
</template>

<style lang="scss" scoped>

.is-dark .card-text-container{
  color: var(--white-smoke);
}
.section{
  &.is-overflown{
    height: calc(100vh - 70px);
    overflow: hidden;
    margin-right: 0px;
    width: 100%;
    padding-right: 0px;
    
    .is-container{
      height: 100%;
      width: 100%;
      margin-right: 0px;
    }
    
    .left::-webkit-scrollbar, .right::-webkit-scrollbar  {
          display: none; 
      }
  }
}

:deep(.page-title) {
  padding-top: 0;
  padding-bottom: 0;
}

.library-search {
  :deep(.input) {
    height: 52px;
    padding-left: 52px;
    border-radius: 0.85rem;
    border-color: var(--input-base-border-color-hover);
  }

  :deep(.field) {
    position: relative;
  }

  :deep(.control) {
    .form-icon {
      height: 52px;
      width: 52px;

      .iconify {
        font-size: 1.5rem;
      }
    }

    .close-search {
      position: absolute;
      top: 0;
      right: 0;
      display: flex;
      justify-content: center;
      align-items: center;
      height: 52px;
      width: 52px;
      font-size: 1rem;
      background: none;
      border: none;
      padding: none;
      color: var(--light-text);
      cursor: pointer;
      transition: color 0.3s;

      &:hover {
        color: var(--primary);
      }
    }
  }
}

.filter-results {
  position: absolute;
  top: 42px;
  left: 0;
  width: 100%;
  background: var(--input-base-bg-color);
  border: 1px solid var(--input-base-border-color-hover);
  border-radius: 0 0 0.85rem 0.85rem;
  border-top: none;

  .filter-results-inner {
    position: relative;
    width: 100%;
    height: 100%;
    padding-top: 0.75rem;

    ul {
      max-height: 290px;
      overflow-y: auto;

      &::-webkit-scrollbar {
        width: 5px !important;
      }

      &::-webkit-scrollbar-thumb {
        border-radius: 10px !important;
        background: rgb(0 0 0 / 20%) !important;
      }
    }

    .filter-result-item {
      padding: 0.75rem 1rem;
      display: flex;
      align-items: center;
      margin: 0 0.5rem;
      width: calc(100% - 1rem);
      border-radius: 0.75rem;
      margin-bottom: 0.5rem;
      transition: background-color 0.3s;

      .result-icon {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 40px;
        width: 40px;
        min-width: 40px;
        border-radius: 50%;
        background: var(--wrap-muted-color);
        font-size: 1.25rem;
        color: var(--primary);
      }

      .meta {
        margin-left: 0.75rem;
        line-height: 1.2;

        h3 {
          font-family: var(--font-alt);
          font-weight: 600;
          font-size: 0.9rem;
          color: var(--title-color);
        }
      }

      .go-icon {
        display: flex;
        justify-content: center;
        align-items: center;
        height: 36px;
        width: 36px;
        min-width: 36px;
        border-radius: 50%;
        margin-left: auto;
        background: var(--wrap-bg-color);
        box-shadow: var(--spread-shadow);
        font-size: 1.15rem;
        color: var(--primary);
        transform: rotate(235deg) scale(0);
        transition: transform 0.3s;
      }

      &:hover {
        background: var(--wrap-muted-color);

        .go-icon {
          transform: rotate(0) scale(1);
        }
      }
    }

    .search-placeholder {
      display: flex;
      justify-content: center;
      align-items: center;
      min-height: 200px;
      text-align: center;

      > div {
        position: relative;
        top: -1rem;
      }

      h3 {
        font-family: var(--font-alt);
        font-weight: 600;
        font-size: 0.9rem;
        color: var(--title-color);
      }

      svg {
        font-size: 1.75rem;
        color: var(--primary);
      }
    }
  }
}

.vulk-docs {
  display: flex;
  column-gap: 10px;
  .left {
    width: calc(240px - -7rem); /*300px  calc(310px - 2rem);*/
    /*margin-right: 2rem;*/
    border-right: 1px solid var(--wrap-border-color);
    
    overflow-y: scroll;
    overflow-x: hidden;
    height: calc(100vh - 70px);

    .left-menu {
      position: sticky;
      top: 90px;

      ul {
        li {
          a {
            position: relative;
            left: 2px;
            display: flex;
            font-family: var(--font);
            margin-bottom: 1rem;
            color: var(--medium-text);
            border-right: 3px solid transparent;

            &.is-active {
              color: var(--primary);
              border-color: var(--primary);
            }
          }
        }
      }
    }
  }

  .right {
    width: calc(100% - 10px);
    overflow-y: scroll;
    overflow-x: hidden;
    height: calc(100vh - 70px);

    .block-group {
      margin-bottom: 3rem;
      margin-top: 10px;

      .block-group-header {
        display: flex;
        align-items: center;
        margin-bottom: 2rem;

        .group-icon {
          display: flex;
          justify-content: center;
          align-items: center;
          height: 55px;
          width: 55px;
          min-width: 55px;
          border-radius: 50%;
          background: var(--wrap-muted-color);
          font-size: 1.5rem;
          color: var(--primary);
        }

        .meta {
          margin-left: 0.75rem;

          h3 {
            font-size: 1.25rem;
            font-family: var(--font-alt);
            font-weight: 500;
            color: var(--primary);
          }

          .paragraph {
            font-size: 0.95rem;
          }
        }
      }
    }
  }
}

:deep(.card) {
  .block-head {
    background: var(--component-card-bg-color);
    transition: 600ms ease;

    img {
      display: block;
      max-width: 100%;
      transform: scale(0.8);
      transition: transform 0.3s;
    }
  }

  &:hover {
    .block-head {
      img {
        transform: scale(0.9);
      }
    }
  }
}

.block-link {
  display: flex;
  align-items: center;
  justify-content: space-between;

  .iconify {
    font-size: 1.25rem;
    transform: translateX(-5px);
    color: var(--placeholder);
    transition: opacity 0.3s, transform 0.3s;
  }

  &:hover {
    .iconify {
      color: var(--primary);
      transform: translateX(0);
    }

    :deep(.title) {
      span {
        color: var(--primary) !important;
      }
    }
  }
}
.is-dark .templates-title{
  color: var(--white-smoke);
}
.is-dark .components-title{
  color: var(--white-smoke);
}
.custom-loader {
  width: 100px;
  height: 100px;
  border-radius: 50%;
  margin: 0 auto;
  background: 
    radial-gradient(farthest-side,#0400F4 94%,#0000) top/16px 16px no-repeat,
    conic-gradient(#0000 30%,#0400F4);
  -webkit-mask: radial-gradient(farthest-side,#0000 calc(100% - 16px),#000 0);
  animation:s3 1s infinite linear;
}

@keyframes s3{ 
  100%{transform: rotate(1turn)}
}

.block-group-card{
  cursor: pointer;
}
.text-description{
   overflow: hidden;
   text-overflow: ellipsis;
   display: -webkit-box;
   -webkit-box-orient: vertical;
   -webkit-line-clamp: 3; /* number of lines to show */
   max-height: 1*1;       /* fallback */
   font-family: var(--font);
   font-size: 1.2rem;
   transition: transform 0.3s, opacity 0.3s;
}

@media only screen and (max-width: 1023px) {
  .vulk-docs {
    .left {
      display: none;
    }

    .right {
      width: 100%;
    }
  }
}

@media only screen and (min-width: 768px) and (max-width: 1024px) and (orientation: landscape) {
  .vulk-docs {
    .left {
      width: calc(240px - 2rem);
    }

    .right {
      width: calc(100% - 100px); /*calc(100% - 240px);*/
      padding: 0 50px;
    }
  }
}
.api-items{
  height: 150px;
}
</style>
